package ProjetPerso3;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Locale;

public class AjouterMateriel {
    private JPanel AjouterMaterielPanel;
    private JTextPane titlePane;
    private JTextField nomTextField;
    private JTextField tailleTextField;
    private JTextField descriptionTextField;
    private JLabel nomLabel;
    private JComboBox renouvelableBox;
    private JComboBox domaineBox;
    private JButton valider;
    private JLabel domaineLabel;
    private JLabel descriptionLabel;
    private JLabel tailleLabel;
    private JCheckBox renouvelableCheckBox;
    private JCheckBox ajouterAuStockCheckBox;
    private JTextField quantiteField;
    private JLabel quantiteLabel;
    private String query;
    private Boolean renouvelable;

    //Map<String, String> attributs = new HashMap<String,String>();// Ã  tester si temps
    public AjouterMateriel() {
        renouvelable = false;


        ajouterAuStockCheckBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (ajouterAuStockCheckBox.isSelected()) {
                    quantiteField.setVisible(true);
                    quantiteLabel.setVisible(true);
                } else {
                    quantiteField.setVisible(false);
                    quantiteLabel.setVisible(false);
                }
            }
        });
    }

    public JPanel getAjouterMaterielPanel() {
        return AjouterMaterielPanel;
    }

    public JTextField getNomTextField() {
        return nomTextField;
    }

    public JTextField getTailleTextField() {
        return tailleTextField;
    }

    public JTextField getDescriptionTextField() {
        return descriptionTextField;
    }

    public JButton getValider() {
        return valider;
    }

    public String createQuery() {
        query = "INSERT INTO materiel (nom_materiel, taille_materiel, description_materiel, renouvelable, nom_domaine) \n" +
                "VALUES ('%s', '%s', '%s', %s, '%s');";
        if (descriptionTextField.getText().isEmpty()) {
            query = String.format(query, nomTextField.getText(), tailleTextField.getText(), null, renouvelable, domaineBox.getSelectedItem().toString());
        } else {
            query = String.format(query, nomTextField.getText(), tailleTextField.getText(), descriptionTextField.getText(), renouvelable, domaineBox.getSelectedItem().toString());

        }
        System.out.println(query);
        return query;
    }

    public String createStockQuery() {
        String stockQuery;

        stockQuery = "INSERT INTO stock(id_materiel,quantite_stock) \n" +
                "VALUES ((SELECT id_materiel FROM materiel WHERE nom_materiel='%s' AND taille_materiel='%s'),%d);";
        try {
            stockQuery = String.format(stockQuery, nomTextField.getText(), tailleTextField.getText(), Integer.parseInt(quantiteField.getText()));
        } catch (NumberFormatException err) {
            JOptionPane.showMessageDialog(null, err.toString(), "saisie incorrecte", JOptionPane.WARNING_MESSAGE);
        }

        System.out.println(stockQuery);
        return stockQuery;
    }

    public int[] ajouterMaterielQuery(Connection connection) throws SQLException {
        int[] sqlResult = new int[]{0, 0};
        if (renouvelableCheckBox.isSelected()) {
            renouvelable = true;
        } else {
            renouvelable = false;
        }

        if (nomTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Veuillez remplir le champ nom", "erreur", JOptionPane.WARNING_MESSAGE);

        } else {

            if (ajouterAuStockCheckBox.isSelected()) {
                try (Statement statement = connection.createStatement()) {
                    sqlResult[0] = statement.executeUpdate(createQuery());
                    sqlResult[1] = statement.executeUpdate(createStockQuery());
                }
            } else {
                try (Statement statement = connection.createStatement()) {
                    sqlResult[0] = statement.executeUpdate(createQuery());
                    sqlResult[1] = -1;
                }
            }
        }
        return sqlResult;

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        AjouterMaterielPanel = new JPanel();
        AjouterMaterielPanel.setLayout(new GridLayoutManager(17, 5, new Insets(0, 0, 0, 0), -1, -1));
        AjouterMaterielPanel.setPreferredSize(new Dimension(600, 600));
        titlePane = new JTextPane();
        titlePane.setEditable(false);
        Font titlePaneFont = this.$$$getFont$$$("Comic Sans MS", -1, 48, titlePane.getFont());
        if (titlePaneFont != null) titlePane.setFont(titlePaneFont);
        titlePane.setText(" Ajouter du materiel");
        AjouterMaterielPanel.add(titlePane, new GridConstraints(0, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final Spacer spacer1 = new Spacer();
        AjouterMaterielPanel.add(spacer1, new GridConstraints(16, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        AjouterMaterielPanel.add(spacer2, new GridConstraints(15, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        AjouterMaterielPanel.add(spacer3, new GridConstraints(9, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        AjouterMaterielPanel.add(spacer4, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        AjouterMaterielPanel.add(spacer5, new GridConstraints(6, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        nomTextField = new JTextField();
        AjouterMaterielPanel.add(nomTextField, new GridConstraints(3, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        tailleTextField = new JTextField();
        AjouterMaterielPanel.add(tailleTextField, new GridConstraints(5, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer6 = new Spacer();
        AjouterMaterielPanel.add(spacer6, new GridConstraints(4, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        descriptionTextField = new JTextField();
        AjouterMaterielPanel.add(descriptionTextField, new GridConstraints(7, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer7 = new Spacer();
        AjouterMaterielPanel.add(spacer7, new GridConstraints(8, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer8 = new Spacer();
        AjouterMaterielPanel.add(spacer8, new GridConstraints(1, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer9 = new Spacer();
        AjouterMaterielPanel.add(spacer9, new GridConstraints(2, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        nomLabel = new JLabel();
        nomLabel.setText("nom");
        AjouterMaterielPanel.add(nomLabel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tailleLabel = new JLabel();
        tailleLabel.setText("taille");
        AjouterMaterielPanel.add(tailleLabel, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        descriptionLabel = new JLabel();
        descriptionLabel.setText("description");
        AjouterMaterielPanel.add(descriptionLabel, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer10 = new Spacer();
        AjouterMaterielPanel.add(spacer10, new GridConstraints(10, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        valider = new JButton();
        valider.setText("valider");
        AjouterMaterielPanel.add(valider, new GridConstraints(14, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        renouvelableCheckBox = new JCheckBox();
        renouvelableCheckBox.setText("renouvelable");
        AjouterMaterielPanel.add(renouvelableCheckBox, new GridConstraints(11, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        domaineBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("plomberie");
        defaultComboBoxModel1.addElement("electricite");
        defaultComboBoxModel1.addElement("mecanique");
        defaultComboBoxModel1.addElement("menuiserie");
        defaultComboBoxModel1.addElement("nettoyage");
        defaultComboBoxModel1.addElement("peinture");
        defaultComboBoxModel1.addElement("autre");
        domaineBox.setModel(defaultComboBoxModel1);
        AjouterMaterielPanel.add(domaineBox, new GridConstraints(9, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        domaineLabel = new JLabel();
        domaineLabel.setText("domaine");
        AjouterMaterielPanel.add(domaineLabel, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ajouterAuStockCheckBox = new JCheckBox();
        ajouterAuStockCheckBox.setText("ajouter au stock");
        AjouterMaterielPanel.add(ajouterAuStockCheckBox, new GridConstraints(12, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        quantiteLabel = new JLabel();
        quantiteLabel.setText("quantitÃ©");
        quantiteLabel.setVisible(false);
        AjouterMaterielPanel.add(quantiteLabel, new GridConstraints(12, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        quantiteField = new JTextField();
        quantiteField.setVisible(false);
        AjouterMaterielPanel.add(quantiteField, new GridConstraints(12, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer11 = new Spacer();
        AjouterMaterielPanel.add(spacer11, new GridConstraints(13, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return AjouterMaterielPanel;
    }

}

