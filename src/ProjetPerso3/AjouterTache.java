package ProjetPerso3;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class AjouterTache {
    private JPanel PanelAjouterTache;
    private JTextPane ajouterUneTacheTextPane;
    private JTextField nomTacheField;
    private JButton validerButton;
    private JLabel nomTacheLabel;
    private JTextField descriptionTacheField;
    private JLabel descriptionTacheLabel;
    private JComboBox nomDomaine;
    private JComboBox priorite;
    private JLabel prioriteLabel;
    private JLabel domaineLabel;
    private JButton ajouterMaterielAssoButton;
    private String query;
    private int addedTacheId;
    private Connection connection;

    //Map<String, String> attributs = new HashMap<String,String>();// à tester si temps
    public AjouterTache(Connection connect) {
        addedTacheId = 0;
        connection = connect;
        query = "INSERT INTO tache (nom_tache, description_tache, priorite_tache, nom_domaine) " +
                "VALUES ('%s', '%s', '%s', '%s')";
    }

    public int ajouterTacheQuery() throws SQLException {
        if (nomTacheField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Veuillez remplir le champ nom", "erreur", JOptionPane.WARNING_MESSAGE);
            return 0;
        } else {

            try (Statement statement = connection.createStatement()) {
                if (descriptionTacheField.getText().isEmpty()) {
                    return statement.executeUpdate(String.format(query, nomTacheField.getText(), null,
                            priorite.getSelectedItem().toString(), nomDomaine.getSelectedItem().toString()));
                } else {
                    query = String.format(query, nomTacheField.getText(), descriptionTacheField.getText(),
                            priorite.getSelectedItem().toString(), nomDomaine.getSelectedItem().toString());
                    System.out.println(query);
                    return statement.executeUpdate(query);
                }

            }
        }
    }

    public int setId() throws SQLException {
        String selectQuery = "";
        ResultSet slct;
        if (descriptionTacheField.getText().isEmpty()) {
            selectQuery = "SELECT id_tache FROM tache \nWHERE nom_tache = '" + nomTacheField.getText() + "' AND priorite_tache = '" + priorite.getSelectedItem().toString() +
                    "' AND nom_domaine = '" + nomDomaine.getSelectedItem().toString() + "';";
        } else {
            selectQuery = "SELECT id_tache FROM tache \nWHERE nom_tache = '" + nomTacheField.getText() + "' AND description_tache = '" + descriptionTacheField.getText() +
                    "' AND priorite_tache = '" + priorite.getSelectedItem().toString() + "' AND nom_domaine = '" + nomDomaine.getSelectedItem().toString() + "';";
        }
        System.out.println(selectQuery);
        try (Statement statement = connection.createStatement()) {
            slct = statement.executeQuery(selectQuery);
            if (slct.next()) {
                addedTacheId = slct.getInt("id_tache");
                System.out.println("id trouvée" + addedTacheId);
            } else {
                System.out.println("pas de next");
                addedTacheId = -1;
            }
        }
        return addedTacheId;
    }

    public JButton getAjouterMaterielAssoButton() {
        return ajouterMaterielAssoButton;
    }

    public JTextField getNomTacheField() {
        return nomTacheField;
    }

    public JButton getValiderButton() {
        return validerButton;
    }

    public JTextField getDescriptionTacheField() {
        return descriptionTacheField;
    }

    public JPanel getPanelAjouterTache() {
        return PanelAjouterTache;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        PanelAjouterTache = new JPanel();
        PanelAjouterTache.setLayout(new GridLayoutManager(14, 4, new Insets(0, 0, 0, 0), -1, -1));
        PanelAjouterTache.setPreferredSize(new Dimension(600, 600));
        ajouterUneTacheTextPane = new JTextPane();
        ajouterUneTacheTextPane.setEditable(false);
        Font ajouterUneTacheTextPaneFont = this.$$$getFont$$$("Comic Sans MS", -1, 60, ajouterUneTacheTextPane.getFont());
        if (ajouterUneTacheTextPaneFont != null) ajouterUneTacheTextPane.setFont(ajouterUneTacheTextPaneFont);
        ajouterUneTacheTextPane.setText("  Ajouter une tache");
        PanelAjouterTache.add(ajouterUneTacheTextPane, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(600, 50), null, 0, false));
        final Spacer spacer1 = new Spacer();
        PanelAjouterTache.add(spacer1, new GridConstraints(13, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        nomTacheField = new JTextField();
        PanelAjouterTache.add(nomTacheField, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer2 = new Spacer();
        PanelAjouterTache.add(spacer2, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        PanelAjouterTache.add(spacer3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        PanelAjouterTache.add(spacer4, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        PanelAjouterTache.add(spacer5, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        PanelAjouterTache.add(spacer6, new GridConstraints(6, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer7 = new Spacer();
        PanelAjouterTache.add(spacer7, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        validerButton = new JButton();
        validerButton.setText("Ajouter");
        PanelAjouterTache.add(validerButton, new GridConstraints(12, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer8 = new Spacer();
        PanelAjouterTache.add(spacer8, new GridConstraints(10, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        nomTacheLabel = new JLabel();
        nomTacheLabel.setText("nom");
        PanelAjouterTache.add(nomTacheLabel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        descriptionTacheLabel = new JLabel();
        descriptionTacheLabel.setText("description");
        PanelAjouterTache.add(descriptionTacheLabel, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nomDomaine = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("plomberie");
        defaultComboBoxModel1.addElement("electricite");
        defaultComboBoxModel1.addElement("mecanique");
        defaultComboBoxModel1.addElement("menuiserie");
        defaultComboBoxModel1.addElement("nettoyage");
        defaultComboBoxModel1.addElement("peinture");
        defaultComboBoxModel1.addElement("autre");
        nomDomaine.setModel(defaultComboBoxModel1);
        PanelAjouterTache.add(nomDomaine, new GridConstraints(9, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        descriptionTacheField = new JTextField();
        PanelAjouterTache.add(descriptionTacheField, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        priorite = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("urgent");
        defaultComboBoxModel2.addElement("important");
        defaultComboBoxModel2.addElement("utile");
        defaultComboBoxModel2.addElement("secondaire");
        defaultComboBoxModel2.addElement("inutile");
        priorite.setModel(defaultComboBoxModel2);
        PanelAjouterTache.add(priorite, new GridConstraints(7, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer9 = new Spacer();
        PanelAjouterTache.add(spacer9, new GridConstraints(8, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        prioriteLabel = new JLabel();
        prioriteLabel.setText("priorité");
        PanelAjouterTache.add(prioriteLabel, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        domaineLabel = new JLabel();
        domaineLabel.setText("Domaine");
        PanelAjouterTache.add(domaineLabel, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ajouterMaterielAssoButton = new JButton();
        ajouterMaterielAssoButton.setText("Ajouter du materiel à cette tache");
        ajouterMaterielAssoButton.setVisible(false);
        PanelAjouterTache.add(ajouterMaterielAssoButton, new GridConstraints(11, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return PanelAjouterTache;
    }

}
