package ProjetPerso3;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Locale;

public class MenuConsulter {
    private JPanel consultPane;
    private JPanel tacheSearchPanel;
    private JTextField nomTacheField;
    private JTextField descriptionTacheField;
    private JTextField idTacheField;
    private JComboBox prioriteTacheBox;
    private JComboBox domaineTacheBox;
    private JPanel materielSearchPanel;
    private JTextField nomMaterielField;
    private JTextField descriptionMaterielField;
    private JTextField idMaterielField;
    private JComboBox domaineMaterielBox;
    private JTable resultsTable;
    private JComboBox choiceBox;
    private JButton validerButton;
    private JCheckBox andDescriptionTache;
    private JCheckBox andDomaineTache;
    private JCheckBox andNomTache;
    private JCheckBox andPrioriteTache;
    private JCheckBox andNomMateriel;
    private JCheckBox andDescriptionMateriel;
    private JCheckBox andDomaineMateriel;
    private JTextField tailleMaterielField;
    private JCheckBox andTailleMateriel;
    private JCheckBox renouvelableCheckBox;
    private JCheckBox andRenouvelable;
    private JRadioButton trueRadioButton;
    private JRadioButton falseRadioButton;
    private JTextField thanksFiels;
    private JCheckBox voirToutCheckBox;

    private Connection connection;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        consultPane = new JPanel();
        consultPane.setLayout(new GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        consultPane.setMinimumSize(new Dimension(600, 400));
        consultPane.setPreferredSize(new Dimension(600, 600));
        final JScrollPane scrollPane1 = new JScrollPane();
        consultPane.add(scrollPane1, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        resultsTable = new JTable();
        scrollPane1.setViewportView(resultsTable);
        final Spacer spacer1 = new Spacer();
        consultPane.add(spacer1, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        choiceBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("tache");
        defaultComboBoxModel1.addElement("materiel");
        defaultComboBoxModel1.addElement("materiel associé");
        defaultComboBoxModel1.addElement("taches associées");
        defaultComboBoxModel1.addElement("liste d'achats");
        choiceBox.setModel(defaultComboBoxModel1);
        consultPane.add(choiceBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        validerButton = new JButton();
        validerButton.setText("valider");
        consultPane.add(validerButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        materielSearchPanel = new JPanel();
        materielSearchPanel.setLayout(new GridLayoutManager(6, 4, new Insets(0, 0, 0, 0), -1, -1));
        materielSearchPanel.setVisible(false);
        consultPane.add(materielSearchPanel, new GridConstraints(0, 1, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(242, 174), null, 0, false));
        nomMaterielField = new JTextField();
        materielSearchPanel.add(nomMaterielField, new GridConstraints(1, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("nom materiel");
        materielSearchPanel.add(label1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        idMaterielField = new JTextField();
        idMaterielField.setText("");
        materielSearchPanel.add(idMaterielField, new GridConstraints(0, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("id materiel");
        materielSearchPanel.add(label2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        domaineMaterielBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("");
        defaultComboBoxModel2.addElement("plomberie");
        defaultComboBoxModel2.addElement("electricite");
        defaultComboBoxModel2.addElement("mecanique");
        defaultComboBoxModel2.addElement("menuiserie");
        defaultComboBoxModel2.addElement("nettoyage");
        defaultComboBoxModel2.addElement("peinture");
        defaultComboBoxModel2.addElement("autre");
        domaineMaterielBox.setModel(defaultComboBoxModel2);
        materielSearchPanel.add(domaineMaterielBox, new GridConstraints(4, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("nom domaine");
        materielSearchPanel.add(label3, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andNomMateriel = new JCheckBox();
        andNomMateriel.setText("AND");
        materielSearchPanel.add(andNomMateriel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andDomaineMateriel = new JCheckBox();
        andDomaineMateriel.setText("AND");
        materielSearchPanel.add(andDomaineMateriel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("description");
        materielSearchPanel.add(label4, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        descriptionMaterielField = new JTextField();
        materielSearchPanel.add(descriptionMaterielField, new GridConstraints(3, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        tailleMaterielField = new JTextField();
        materielSearchPanel.add(tailleMaterielField, new GridConstraints(2, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        andDescriptionMateriel = new JCheckBox();
        andDescriptionMateriel.setText("AND");
        materielSearchPanel.add(andDescriptionMateriel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("taille");
        materielSearchPanel.add(label5, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andTailleMateriel = new JCheckBox();
        andTailleMateriel.setText("AND");
        materielSearchPanel.add(andTailleMateriel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andRenouvelable = new JCheckBox();
        andRenouvelable.setText("AND");
        materielSearchPanel.add(andRenouvelable, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        renouvelableCheckBox = new JCheckBox();
        renouvelableCheckBox.setText("renouvelable");
        materielSearchPanel.add(renouvelableCheckBox, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        trueRadioButton = new JRadioButton();
        trueRadioButton.setText("true");
        materielSearchPanel.add(trueRadioButton, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        falseRadioButton = new JRadioButton();
        falseRadioButton.setText("false");
        materielSearchPanel.add(falseRadioButton, new GridConstraints(5, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tacheSearchPanel = new JPanel();
        tacheSearchPanel.setLayout(new GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        tacheSearchPanel.setVisible(true);
        consultPane.add(tacheSearchPanel, new GridConstraints(0, 2, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        nomTacheField = new JTextField();
        tacheSearchPanel.add(nomTacheField, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("nom tache");
        tacheSearchPanel.add(label6, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        descriptionTacheField = new JTextField();
        tacheSearchPanel.add(descriptionTacheField, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("description");
        tacheSearchPanel.add(label7, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        idTacheField = new JTextField();
        idTacheField.setText("");
        tacheSearchPanel.add(idTacheField, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("id tache");
        tacheSearchPanel.add(label8, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        prioriteTacheBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
        defaultComboBoxModel3.addElement("");
        defaultComboBoxModel3.addElement("urgent");
        defaultComboBoxModel3.addElement("important");
        defaultComboBoxModel3.addElement("utile");
        defaultComboBoxModel3.addElement("secondaire");
        defaultComboBoxModel3.addElement("inutile");
        prioriteTacheBox.setModel(defaultComboBoxModel3);
        tacheSearchPanel.add(prioriteTacheBox, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label9 = new JLabel();
        label9.setText("priorité");
        tacheSearchPanel.add(label9, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        domaineTacheBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel4 = new DefaultComboBoxModel();
        defaultComboBoxModel4.addElement("");
        defaultComboBoxModel4.addElement("plomberie");
        defaultComboBoxModel4.addElement("electricite");
        defaultComboBoxModel4.addElement("mecanique");
        defaultComboBoxModel4.addElement("menuiserie");
        defaultComboBoxModel4.addElement("nettoyage");
        defaultComboBoxModel4.addElement("peinture");
        defaultComboBoxModel4.addElement("autre");
        domaineTacheBox.setModel(defaultComboBoxModel4);
        tacheSearchPanel.add(domaineTacheBox, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label10 = new JLabel();
        label10.setText("nom domaine");
        tacheSearchPanel.add(label10, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andNomTache = new JCheckBox();
        andNomTache.setText("AND");
        tacheSearchPanel.add(andNomTache, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andDescriptionTache = new JCheckBox();
        andDescriptionTache.setText("AND");
        tacheSearchPanel.add(andDescriptionTache, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andPrioriteTache = new JCheckBox();
        andPrioriteTache.setText("AND");
        tacheSearchPanel.add(andPrioriteTache, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andDomaineTache = new JCheckBox();
        andDomaineTache.setText("AND");
        tacheSearchPanel.add(andDomaineTache, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        thanksFiels = new JTextField();
        thanksFiels.setEditable(false);
        Font thanksFielsFont = this.$$$getFont$$$(null, -1, 10, thanksFiels.getFont());
        if (thanksFielsFont != null) thanksFiels.setFont(thanksFielsFont);
        thanksFiels.setText("merci à Dominique Liard de koor.fr pour le modèle de tableau de résultat");
        thanksFiels.setVisible(false);
        consultPane.add(thanksFiels, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 10), null, 0, false));
        voirToutCheckBox = new JCheckBox();
        voirToutCheckBox.setText("voir tout");
        voirToutCheckBox.setVisible(false);
        consultPane.add(voirToutCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(trueRadioButton);
        buttonGroup.add(falseRadioButton);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return consultPane;
    }

    private enum Choice {tache, materiel, materiel_associe, taches_associees}

    ;
    private Choice choice;
    private String fullSelect;
    private ResultSet resultTache;
    private String trySelect = "SELECT * FROM tache";
    private boolean firstQuery;


    public MenuConsulter(Connection connect) {
        firstQuery = true;
        resultsTable.setVisible(false);
        resultsTable.setAutoCreateRowSorter(true);
        connection = connect;
        choice = Choice.tache;
        choiceBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (choiceBox.getSelectedItem().toString() == "tache") {
                    voirToutCheckBox.setVisible(false);
                    materielSearchPanel.setVisible(false);
                    tacheSearchPanel.setVisible(true);
                    choice = Choice.tache;
                } else if (choiceBox.getSelectedItem().toString() == "materiel") {
                    voirToutCheckBox.setVisible(false);
                    tacheSearchPanel.setVisible(false);
                    materielSearchPanel.setVisible(true);
                    choice = Choice.materiel;

                } else if (choiceBox.getSelectedItem().toString() == "materiel associé") {
                    tacheSearchPanel.setVisible(false);
                    materielSearchPanel.setVisible(false);
                    choice = Choice.materiel_associe;
                    voirToutCheckBox.setVisible(true);

                } else if (choiceBox.getSelectedItem().toString() == "taches associées") {
                    tacheSearchPanel.setVisible(false);
                    materielSearchPanel.setVisible(false);
                    choice = Choice.taches_associees;
                    voirToutCheckBox.setVisible(true);
                } else if (choiceBox.getSelectedItem().toString() == "liste d'achats") {
                    tacheSearchPanel.setVisible(false);
                    materielSearchPanel.setVisible(false);
                    voirToutCheckBox.setVisible(false);
                    String achatsQuery;

                    achatsQuery = "SELECT * FROM achat;";
                    try {
                        sendQuery(achatsQuery);
                    } catch (SQLException err) {
                        JOptionPane.showMessageDialog(null, err.toString());
                    }

                }
            }
        });


        validerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                try {

                    System.out.println("bouton valider activé");
                    if (choice == Choice.tache) {
                        sendQuery(createTacheQuery());
                    } else if (choice == Choice.materiel) {

                        sendQuery(createMaterielQuery());
                    } else if (choice == Choice.materiel_associe) {
                        String query;
                        if (voirToutCheckBox.isSelected()) {
                            query = "SELECT materiel.id_materiel, nom_materiel, taille_materiel, quantite_stock, reserver_stock, nom_tache FROM materiel " +
                                    "LEFT JOIN necessite ON necessite.id_materiel = materiel.id_materiel " +
                                    "LEFT JOIN tache ON necessite.id_tache = tache.id_tache " +
                                    "LEFT JOIN stock ON materiel.id_materiel = stock.id_materiel " +
                                    "ORDER BY materiel.id_materiel;";
                        } else {
                            query = "SELECT materiel.id_materiel,nom_materiel, tache.id_tache,nom_tache FROM tache,materiel, necessite " +
                                    "WHERE tache.id_tache=necessite.id_tache AND materiel.id_materiel=necessite.id_materiel;";
                        }
                        sendQuery(query);
                    } else if (choice == Choice.taches_associees) {
                        String query;
                        if (voirToutCheckBox.isSelected()) {
                            query = "SELECT tache.id_tache, nom_tache,description_tache, nom_materiel, quantite_necessite FROM tache " +
                                    "LEFT JOIN necessite ON necessite.id_tache = tache.id_tache " +
                                    "LEFT JOIN materiel ON necessite.id_materiel = materiel.id_materiel " +
                                    "LEFT JOIN stock ON materiel.id_materiel = stock.id_materiel " +
                                    "ORDER BY tache.id_tache; ";
                        } else {
                            query = "SELECT tache.id_tache,nom_tache,materiel.id_materiel,nom_materiel FROM tache,materiel,necessite " +
                                    "WHERE tache.id_tache=necessite.id_tache AND materiel.id_materiel=necessite.id_materiel;";
                        }
                        sendQuery(query);
                    }
//                        resultTache = sendTacheQuery();
//                        System.out.println("fonction passée");
//                        while (resultTache.next()) {
//                            String nomTache = resultTache.getNString("nom_tache");
//                            System.out.println(nomTache);
//                        }

                } catch (SQLException err) {
                    JOptionPane.showMessageDialog(null, err.toString());
                }
//                    queryTache="SELECT * " +
//                            "FROM tache ";
//                            /*whereId +
//                            whereNom +
//                            whereDomaine +
//                            priorite +
//                            description; */


            }
        });
    }


    public String createTacheQuery() {
        System.out.println("debut creation tache");
        fullSelect = "SELECT * " +
                "FROM tache " +
                "WHERE id_tache = %d " +
                "%s LOCATE('%s', nom_tache) != 0 " +
                "%s LOCATE('%s', description_tache) !=0 " +
                "%s priorite_tache = '%s' " +
                "%s nom_domaine = '%s'; ";

        String whereId = idTacheField.getText();
        int id = 0;
        try {
            id = Integer.parseInt(whereId);
        } catch (NumberFormatException err) {
            id = -1;
        }

        String whereNom = nomTacheField.getText();
        if (whereNom == "" || whereNom.isEmpty()) {
            whereNom = "///";
        }
        String opNom = "OR";

        String description = descriptionTacheField.getText();
        System.out.println("description" + description + "suite");
        if (description.isEmpty() || description == "") {
            System.out.println("descript est vide");
            description = "///";
        }
        String opDescription = "OR";

        String priorite = prioriteTacheBox.getSelectedItem().toString();
        String opPriorite = "OR";

        String whereDomaine = domaineTacheBox.getSelectedItem().toString();
        if (whereDomaine.isEmpty()) System.out.println("wheredomaine est vide");
        String opDomaine = "OR";


        if (andNomTache.isSelected()) {
            opNom = "AND";
        }
        if (andDescriptionTache.isSelected()) {
            opDescription = "AND";
        }
        if (andPrioriteTache.isSelected()) {
            opPriorite = "AND";
        }
        if (andDomaineTache.isSelected()) {
            opDomaine = "AND";
        }

        return String.format(fullSelect, id, opNom, whereNom, opDescription, description, opPriorite, priorite, opDomaine, whereDomaine);
    }

    public void sendQuery(String query) throws SQLException {
        showThanks();
        try (Statement statement = connection.createStatement()) {
            fullSelect = query;
            System.out.println(fullSelect);
            ResultSet resultTache = statement.executeQuery(fullSelect);
            ResultsTableModel resultsTableModel = new ResultsTableModel(resultTache);
            resultsTable.setModel(resultsTableModel);
            resultsTable.setVisible(true);
            consultPane.updateUI();


        }
    }

    public void showThanks() {
        if (firstQuery) {
            Timer t = new Timer(5000, null);
            t.setRepeats(false);
            thanksFiels.setVisible(true);
            t.start();
            t.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    thanksFiels.setVisible(false);
                    firstQuery = false;
                }
            });
        }
    }

    public void createAssociationQuery() {
        String materielAsso = "SELECT materiel.id_materiel,nom_materiel,quantite_stock,reserver_stock,tache.id_tache,nom_tache FROM tache,materiel,stock,necessite " +
                "WHERE tache.id_tache=necessite.id_tache AND materiel.id_materiel=necessite.id_materiel AND materiel.id_materiel=stock.id_materiel;";
    }

    public String createMaterielQuery() {
        System.out.println("debut creation materiel");
        fullSelect = "SELECT * " +
                "FROM materiel " +
                "WHERE id_materiel = %d " +
                "%s LOCATE('%s', nom_materiel) != 0 " +
                "%s LOCATE('%s', taille_materiel) != 0 " +
                "%s LOCATE('%s', description_materiel) !=0 " +
                "%s nom_domaine = '%s' ";

        String whereId = idMaterielField.getText();
        int id;
        try {
            id = Integer.parseInt(whereId);
        } catch (NumberFormatException err) {
            id = -1;
        }

        String opNom = "OR";
        String whereNom = nomMaterielField.getText();
        if (whereNom == "" || whereNom.isEmpty()) {
            whereNom = "///";
        }

        String opTaille = "OR";
        String whereTaille = tailleMaterielField.getText();
        if (whereTaille == "" || whereTaille.isEmpty()) {
            whereTaille = "///";
        }

        String opDescription = "OR";
        String description = descriptionMaterielField.getText();
        System.out.println("description" + description + "suite");
        if (description.isEmpty() || description == "") {
            System.out.println("descript est vide");
            description = "///";
        }

        String opDomaine = "OR";
        String whereDomaine = domaineMaterielBox.getSelectedItem().toString();
        if (whereDomaine.isEmpty()) System.out.println("wheredomaine est vide");

        String opRenouvelable = "OR";
        String renouvelable;

        if (andNomMateriel.isSelected()) {
            opNom = "AND";
        }
        if (andTailleMateriel.isSelected()) {
            opTaille = "AND";
        }
        if (andDescriptionMateriel.isSelected()) {
            opDescription = "AND";
        }
        if (andDomaineMateriel.isSelected()) {
            opDomaine = "AND";
        }
        if (andRenouvelable.isSelected()) {
            opRenouvelable = "AND";
        }

        if (renouvelableCheckBox.isSelected()) {
            if (trueRadioButton.isSelected()) {
                renouvelable = "true";
            } else {
                renouvelable = "false";
            }
            fullSelect += "%s renouvelable = %s ; ";
            return String.format(fullSelect, id, opNom, whereNom, opTaille, whereTaille, opDescription, description, opDomaine, whereDomaine, opRenouvelable, renouvelable);
        } else {
            fullSelect += ";";
            return String.format(fullSelect, id, opNom, whereNom, opTaille, whereTaille, opDescription, description, opDomaine, whereDomaine);
        }


    }

    public JPanel getConsultPane() {
        return consultPane;
    }

    public JComboBox getChoiceBox() {
        return choiceBox;
    }

    public JButton getValiderButton() {
        return validerButton;
    }
}
