package ProjetPerso3;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class MenuModifier {
    private JPanel modifierMainPane;

    private JPanel tacheSearchPanel;
    private JTextField nomTacheField;
    private JTextField descriptionTacheField;
    private JTextField idTacheField;
    private JComboBox prioriteTacheBox;
    private JComboBox domaineTacheBox;
    private JPanel materielSearchPanel;
    private JTextField nomMaterielField;
    private JTextField descriptionMaterielField;
    private JTextField idMaterielField;
    private JComboBox domaineMaterielBox;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        modifierMainPane = new JPanel();
        modifierMainPane.setLayout(new GridLayoutManager(11, 4, new Insets(0, 0, 0, 0), -1, -1));
        modifierMainPane.setMinimumSize(new Dimension(700, 600));
        modifierMainPane.setPreferredSize(new Dimension(700, 600));
        final Spacer spacer1 = new Spacer();
        modifierMainPane.add(spacer1, new GridConstraints(10, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        tacheSearchPanel = new JPanel();
        tacheSearchPanel.setLayout(new GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        tacheSearchPanel.setVisible(true);
        modifierMainPane.add(tacheSearchPanel, new GridConstraints(0, 1, 5, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        nomTacheField = new JTextField();
        tacheSearchPanel.add(nomTacheField, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("nom tache");
        tacheSearchPanel.add(label1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        descriptionTacheField = new JTextField();
        tacheSearchPanel.add(descriptionTacheField, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("description");
        tacheSearchPanel.add(label2, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        idTacheField = new JTextField();
        idTacheField.setText("");
        tacheSearchPanel.add(idTacheField, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("id tache");
        tacheSearchPanel.add(label3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        prioriteTacheBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("");
        defaultComboBoxModel1.addElement("urgent");
        defaultComboBoxModel1.addElement("important");
        defaultComboBoxModel1.addElement("utile");
        defaultComboBoxModel1.addElement("secondaire");
        defaultComboBoxModel1.addElement("inutile");
        prioriteTacheBox.setModel(defaultComboBoxModel1);
        tacheSearchPanel.add(prioriteTacheBox, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("prioritÃ©");
        tacheSearchPanel.add(label4, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        domaineTacheBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("");
        defaultComboBoxModel2.addElement("plomberie");
        defaultComboBoxModel2.addElement("electricite");
        defaultComboBoxModel2.addElement("mecanique");
        defaultComboBoxModel2.addElement("menuiserie");
        defaultComboBoxModel2.addElement("nettoyage");
        defaultComboBoxModel2.addElement("peinture");
        defaultComboBoxModel2.addElement("autre");
        domaineTacheBox.setModel(defaultComboBoxModel2);
        tacheSearchPanel.add(domaineTacheBox, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("nom domaine");
        tacheSearchPanel.add(label5, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andNomTache = new JCheckBox();
        andNomTache.setText("AND");
        tacheSearchPanel.add(andNomTache, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andDescriptionTache = new JCheckBox();
        andDescriptionTache.setText("AND");
        tacheSearchPanel.add(andDescriptionTache, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andPrioriteTache = new JCheckBox();
        andPrioriteTache.setText("AND");
        tacheSearchPanel.add(andPrioriteTache, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andDomaineTache = new JCheckBox();
        andDomaineTache.setText("AND");
        tacheSearchPanel.add(andDomaineTache, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        materielSearchPanel = new JPanel();
        materielSearchPanel.setLayout(new GridLayoutManager(6, 4, new Insets(0, 0, 0, 0), -1, -1));
        materielSearchPanel.setVisible(false);
        modifierMainPane.add(materielSearchPanel, new GridConstraints(0, 2, 5, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        nomMaterielField = new JTextField();
        materielSearchPanel.add(nomMaterielField, new GridConstraints(1, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("nom materiel");
        materielSearchPanel.add(label6, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        idMaterielField = new JTextField();
        idMaterielField.setText("");
        materielSearchPanel.add(idMaterielField, new GridConstraints(0, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("id materiel");
        materielSearchPanel.add(label7, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        domaineMaterielBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
        defaultComboBoxModel3.addElement("");
        defaultComboBoxModel3.addElement("plomberie");
        defaultComboBoxModel3.addElement("electricite");
        defaultComboBoxModel3.addElement("mecanique");
        defaultComboBoxModel3.addElement("menuiserie");
        defaultComboBoxModel3.addElement("nettoyage");
        defaultComboBoxModel3.addElement("peinture");
        defaultComboBoxModel3.addElement("autre");
        domaineMaterielBox.setModel(defaultComboBoxModel3);
        materielSearchPanel.add(domaineMaterielBox, new GridConstraints(4, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("nom domaine");
        materielSearchPanel.add(label8, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andNomMateriel = new JCheckBox();
        andNomMateriel.setText("AND");
        materielSearchPanel.add(andNomMateriel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andDomaineMateriel = new JCheckBox();
        andDomaineMateriel.setText("AND");
        materielSearchPanel.add(andDomaineMateriel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label9 = new JLabel();
        label9.setText("description");
        materielSearchPanel.add(label9, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        descriptionMaterielField = new JTextField();
        materielSearchPanel.add(descriptionMaterielField, new GridConstraints(3, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        tailleMaterielField = new JTextField();
        materielSearchPanel.add(tailleMaterielField, new GridConstraints(2, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        andDescriptionMateriel = new JCheckBox();
        andDescriptionMateriel.setText("AND");
        materielSearchPanel.add(andDescriptionMateriel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label10 = new JLabel();
        label10.setText("taille");
        materielSearchPanel.add(label10, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andTailleMateriel = new JCheckBox();
        andTailleMateriel.setText("AND");
        materielSearchPanel.add(andTailleMateriel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andRenouvelable = new JCheckBox();
        andRenouvelable.setText("AND");
        materielSearchPanel.add(andRenouvelable, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        renouvelableCheckBox = new JCheckBox();
        renouvelableCheckBox.setText("renouvelable");
        materielSearchPanel.add(renouvelableCheckBox, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        trueRadioButton = new JRadioButton();
        trueRadioButton.setText("true");
        materielSearchPanel.add(trueRadioButton, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        falseRadioButton = new JRadioButton();
        falseRadioButton.setText("false");
        materielSearchPanel.add(falseRadioButton, new GridConstraints(5, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        validerButton = new JButton();
        validerButton.setText("valider");
        modifierMainPane.add(validerButton, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(58, 30), null, 0, false));
        stepField = new JTextField();
        modifierMainPane.add(stepField, new GridConstraints(9, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(58, 30), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        modifierMainPane.add(scrollPane1, new GridConstraints(5, 1, 4, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        resultsTable = new JTable();
        scrollPane1.setViewportView(resultsTable);
        choiceBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel4 = new DefaultComboBoxModel();
        defaultComboBoxModel4.addElement("tache");
        defaultComboBoxModel4.addElement("materiel");
        choiceBox.setModel(defaultComboBoxModel4);
        modifierMainPane.add(choiceBox, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(58, 30), null, 0, false));
        supprimerButton = new JButton();
        supprimerButton.setEnabled(false);
        supprimerButton.setText("supprimer");
        supprimerButton.setVisible(true);
        modifierMainPane.add(supprimerButton, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        associationButton = new JButton();
        associationButton.setEnabled(false);
        associationButton.setText("association");
        modifierMainPane.add(associationButton, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        quantiteField = new JTextField();
        quantiteField.setVisible(false);
        modifierMainPane.add(quantiteField, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(50, -1), new Dimension(50, -1), new Dimension(50, -1), 0, false));
        quantiteLabel = new JLabel();
        quantiteLabel.setText("quantitÃ©");
        quantiteLabel.setVisible(false);
        modifierMainPane.add(quantiteLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        modifierMainPane.add(spacer2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return modifierMainPane;
    }

    private enum Choice {materiel, tache, materielAssocie}

    private Choice choice;
    private JButton validerButton;
    private JTable resultsTable;

    private enum Step {Search, Select, change, disabled}

    ;
    private Step tacheStep;
    private Step materielStep;
    private Step assoStep;
    private JCheckBox andNomTache;
    private JCheckBox andDescriptionTache;
    private JCheckBox andPrioriteTache;
    private JCheckBox andDomaineTache;
    private JCheckBox andNomMateriel;
    private JCheckBox andDomaineMateriel;
    private JTextField tailleMaterielField;
    private JCheckBox andDescriptionMateriel;
    private JCheckBox andTailleMateriel;
    private JCheckBox andRenouvelable;
    private JCheckBox renouvelableCheckBox;
    private JRadioButton trueRadioButton;
    private JRadioButton falseRadioButton;
    private JComboBox choiceBox;
    private JTextField stepField;
    private JButton supprimerButton;
    private JButton associationButton;
    private JTextField quantiteField;
    private JLabel quantiteLabel;

    private int selectedRow;
    private int selectedCol;
    private int selectId;
    private Connection connection;


    public MenuModifier(Connection connect) {
        connection = connect;
        //resultsTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        validerButton.setText("chercher");
        supprimerButton.setEnabled(false);
        idTacheField.setEditable(true);
        idMaterielField.setEditable(true);
        resultsTable.setVisible(true);
        choice = Choice.tache;
        tacheStep = Step.Search;
        stepField.setText("remplir le formulaire de recherche");
        choiceBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (choiceBox.getSelectedItem().toString() == "tache") {
                    choice = Choice.tache;
                    tacheStep = Step.Search;
                    materielStep = Step.disabled;
                    stepField.setText("remplir le formulaire de recherche");
                    materielSearchPanel.setVisible(false);
                    idTacheField.setEditable(true);
                    tacheSearchPanel.setVisible(true);
                } else if (choiceBox.getSelectedItem().toString() == "materiel") {
                    choice = Choice.materiel;
                    materielStep = Step.Search;
                    tacheStep = Step.disabled;
                    stepField.setText("remplir le formulaire de recherche");
                    tacheSearchPanel.setVisible(false);
                    idMaterielField.setEditable(true);
                    materielSearchPanel.setVisible(true);

                } else if (choiceBox.getSelectedItem().toString() == "materiel associÃ©") {
                    choice = Choice.materielAssocie;
                    assoStep = Step.Search;
                    tacheSearchPanel.setVisible(false);
                    materielSearchPanel.setVisible(true);
                }
            }
        });

        validerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {

                    /*partie taches*/

                    if (choice == Choice.tache) {
                        if (tacheStep == Step.Search) {
                            System.out.println("if step search validÃ©");
                            search();
                            choiceBox.setEnabled(false);
                            idTacheField.setEditable(false);

                        } else if (tacheStep == Step.Select) {
                            System.out.println("selectTache activÃ©");
                            selectResult();
                            showForm(); //affiche les valeurs de la tache selectionnÃ©e
                            System.out.println("step vaut: " + tacheStep.toString());
                            associationButton.setEnabled(true);
                            associationButton.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    tacheStep = Step.disabled;

                                    assoStep = Step.Select;
                                    sendCheckQuery();
                                    choice = Choice.materielAssocie;
                                    tacheSearchPanel.setVisible(false);
                                    supprimerButton.setEnabled(false);
                                    associationButton.setEnabled(false);
                                    validerButton.setText("selectionner materiel");
                                }
                            });
                        } else if (tacheStep == Step.change) {
                            System.out.println("modify activÃ©");
//                            System.out.println(createUpdateQuery());
                            associationButton.setEnabled(false);
                            supprimerButton.setEnabled(false);
                            int affectedRows = sendUpdate(createUpdateQuery());

                            if (affectedRows == 0) {
                                JOptionPane.showMessageDialog(null, "aucun changement effectuÃ©");
                            } else {
                                JOptionPane.showMessageDialog(null, String.format("%d colonne(s) affectÃ©e(s)", affectedRows));

                            }

                        }


                    }
                    /*partie materiel*/

                    else if (choice == Choice.materiel) {
                        if (materielStep == Step.Search) {
                            System.out.println("if step search materiel validÃ©");
                            System.out.println("valeur de choice.name : " + choice.name());
                            search();
                            choiceBox.setEnabled(false);
                            idMaterielField.setEditable(false);
                        } else if (materielStep == Step.Select) {
                            System.out.println("selectmateriel activÃ©");
                            selectResult();
                            showForm(); //affiche les valeurs de la tache selectionnÃ©e
                            System.out.println("step vaut: " + tacheStep.toString());
                            /*associationButton.setEnabled(true);
                            associationButton.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    materielStep = Step.disabled;

                                    assoStep = Step.Select;
                                    sendCheckQuery();
                                    choice = Choice.materielAssocie;
                                }
                            });*/
                        } else if (materielStep == Step.change) {
                            System.out.println("modify activÃ©");
//                            System.out.println(createUpdateQuery());

                            supprimerButton.setEnabled(false);
                            int affectedRows = sendUpdate(createUpdateQuery());

                            if (affectedRows == 0) {
                                JOptionPane.showMessageDialog(null, "aucun changement effectuÃ©");
                            } else {
                                JOptionPane.showMessageDialog(null, String.format("%d colonne(s) affectÃ©e(s)", affectedRows));

                            }
                        }
                    } else if (choice == Choice.materielAssocie) {
                        if (assoStep == Step.Select) {
                            selectResult();
                            showQuantite();
                            quantiteField.setVisible(true);
                            quantiteLabel.setVisible(true);

                        } else if (assoStep == Step.change) {
                            supprimerButton.setEnabled(false);
                            int affectedRows = sendUpdate(createUpdateQuery());

                            if (affectedRows == 0) {
                                JOptionPane.showMessageDialog(null, "aucun changement effectuÃ©");
                            } else {
                                JOptionPane.showMessageDialog(null, String.format("%d colonne(s) affectÃ©e(s)", affectedRows));

                            }

                        }
                    }

                } catch (SQLException err) {
                    JOptionPane.showMessageDialog(null, err.toString());
                }
            }
        });
        supprimerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if ((choice == Choice.tache && tacheStep == Step.change) || (choice == Choice.materiel && materielStep == Step.change) ||
                            (choice == Choice.materielAssocie && assoStep == Step.change)) {

                        validerButton.setEnabled(false);
                        int affectedRows = sendUpdate(createDeleteQuery());

                        if (affectedRows == 0) {
                            JOptionPane.showMessageDialog(null, "aucun changement effectuÃ©");
                        } else {
                            JOptionPane.showMessageDialog(null, String.format("%d colonne(s) affectÃ©e(s)", affectedRows));

                        }

                    }

                } catch (SQLException err) {
                    JOptionPane.showMessageDialog(null, err.toString());
                }
            }
        });

    }

    public void sendCheckQuery() {
        String checkQuery = "SELECT materiel.id_materiel, nom_materiel, quantite_necessite FROM materiel, necessite\n" +
                "WHERE necessite.id_materiel = materiel.id_materiel AND necessite.id_tache = " + selectId + ";";

        try {
            sendQuery(checkQuery);
        } catch (SQLException err) {
            JOptionPane.showMessageDialog(null, err.toString());
        }
    }

    public String createDeleteQuery() {
        String query = "";
        if (choice == Choice.tache) {
            query = "DELETE FROM tache \n" +
                    "WHERE id_tache = " +
                    selectId + ";";
        } else if (choice == Choice.materiel) {
            query = "DELETE FROM materiel \n" +
                    "WHERE id_materiel = " +
                    selectId + ";";
        } else if (choice == Choice.materielAssocie) {
            query = "DELETE FROM necessite \n" +
                    "WHERE id_materiel = " +
                    selectId + ";";
        }
        return query;
    }

    public String createUpdateQuery() {
        String query = "";
        if (choice == Choice.tache) {
            query = "UPDATE tache \n" +
                    "SET nom_tache = '" +
                    nomTacheField.getText() +
                    "',\ndescription_tache = '" +
                    descriptionTacheField.getText() +
                    "',\npriorite_tache = '" +
                    prioriteTacheBox.getSelectedItem().toString() +
                    "'\nnom_domaine = '" +
                    domaineTacheBox.getSelectedItem().toString() +
                    "'\nWHERE id_tache = " + selectId;
        } else if (choice == Choice.materiel) {
            String renouvelable;
            if (trueRadioButton.isSelected()) {
                renouvelable = "true";
            } else {
                renouvelable = "false";
            }
            if (descriptionMaterielField.getText() == "") {
                query = "UPDATE materiel \n" +
                        "SET nom_materiel = '" +
                        nomMaterielField.getText() +
                        "',\ntaille_materiel = '" +
                        tailleMaterielField.getText() +
                        "',\nrenouvelable = " +
                        renouvelable +
                        ",\nnom_domaine = '" +
                        domaineMaterielBox.getSelectedItem().toString() +
                        "'\nWHERE id_materiel = " + selectId;
            } else {
                query = "UPDATE materiel \n" +
                        "SET nom_materiel = '" +
                        nomMaterielField.getText() +
                        "',\ntaille_materiel = '" +
                        tailleMaterielField.getText() +
                        "',\ndescription_materiel = '" +
                        descriptionMaterielField.getText() +
                        "',\nrenouvelable = " +
                        renouvelable +
                        ",\nnom_domaine = '" +
                        domaineMaterielBox.getSelectedItem().toString() +
                        "'\nWHERE id_materiel = " + selectId;
            }
        } else if (choice == Choice.materielAssocie) {
            query = "UPDATE necessite \n" +
                    "SET quantite_necessite =" +
                    quantiteField.getText() +
                    "\nWHERE id_materiel = " + selectId;
        }

        return query;
    }

    public void search() throws SQLException {
        System.out.println("bouton valider en mode tache");
        resultsTable.setVisible(true);
        if (choice == Choice.tache) {
            if (sendQuery(createTacheQuery())) {
                validerButton.setText("selectionner une tache");

                stepField.setText("Selectionner une tache et valider ou supprimer");
                tacheStep = Step.Select;
            }
        } else if (choice == Choice.materiel) {
            if (sendQuery(createMaterielQuery())) {
                validerButton.setText("selectionner le materiel");

                stepField.setText("Selectionner un materiel et valider ou supprimer");
                materielStep = Step.Select;

            }
        }
    }

    public void selectResult() throws SQLException {

        selectedRow = resultsTable.getSelectedRow();
        selectedCol = resultsTable.getSelectedColumn();
        selectId = Integer.parseInt(resultsTable.getModel().getValueAt(selectedRow, 0).toString());
        //chosenField.setText(resultsTable.getModel().getValueAt(selectedRow,1).toString());

        if (choice == Choice.tache) {
            tacheStep = Step.change;
            supprimerButton.setEnabled(true);
            stepField.setText("entrer les valeurs Ã  modifier");
        } else if (choice == Choice.materiel) {
            materielStep = Step.change;
            supprimerButton.setEnabled(true);
            stepField.setText("entrer les valeurs Ã  modifier");
        } else if (choice == Choice.materielAssocie) {
            assoStep = Step.change;
            supprimerButton.setEnabled(true);
            stepField.setText("saisir la quantitÃ© ou supprimer");
        }
        validerButton.setText("modifier");


        /*
        retourButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tacheSearchPanel.setVisible(true);
                materielSearchPanel.setVisible(false);
                retourButton.setEnabled(false);
                resultsTable.setVisible(false);
                stepField.setText("remplir le formulaire de recherche de tache et valider.");
                step = AjoutMaterielAssocie.Step.tacheSearch;
            }
        });

         */
    }

    public void showQuantite() {

        int row = resultsTable.getSelectedRow();
        quantiteField.setText(resultsTable.getValueAt(row, 2).toString());


    }

    public void showForm() throws SQLException {
        String query = "SELECT * FROM %s \n" +
                "WHERE id_%s = %d;";
        String str = choice.name();

        query = String.format(query, str, str, selectId);
        System.out.println(query);
        sendQuery(query);
        if (str == "tache") {
            idTacheField.setText(resultsTable.getValueAt(0, 0).toString()); // colonne 0: id
            idTacheField.setEditable(false);
            nomTacheField.setText(resultsTable.getValueAt(0, 1).toString()); // colonne 1: nom
            if (resultsTable.getValueAt(0, 2).toString() != null) {  //colonne 2: description
                descriptionTacheField.setText(resultsTable.getValueAt(0, 2).toString());
            } else {
                descriptionTacheField.setText("");
            }
            prioriteTacheBox.setSelectedItem(resultsTable.getValueAt(0, 3).toString()); // colonne 3: prioritÃ©
            domaineTacheBox.setSelectedItem(resultsTable.getValueAt(0, 4).toString()); // colonne 4: domaine
        } else if (str == "materiel") {
            idMaterielField.setText(resultsTable.getValueAt(0, 0).toString()); // colonne 0: id
            idMaterielField.setEditable(false);
            nomMaterielField.setText(resultsTable.getValueAt(0, 1).toString()); // colonne 1: nom
            tailleMaterielField.setText(resultsTable.getValueAt(0, 2).toString()); //colonne 2 taille
            System.out.println("avant description");
            try {

                descriptionMaterielField.setText(resultsTable.getValueAt(0, 3).toString());  //colonne 3: description (nullable)
                System.out.println("description n'est pas null");
            } catch (NullPointerException err) {
                System.out.println("description  = null");
                descriptionMaterielField.setText("");
            }


            System.out.println("valeur de renouvelable :" + resultsTable.getValueAt(0, 4).toString());
            if (resultsTable.getValueAt(0, 4).toString() == "false") {   //colonne 4: renouvelable
                System.out.println("if renouvelable = false");
                renouvelableCheckBox.setSelected(true);
                falseRadioButton.setSelected(true);
            } else if (resultsTable.getValueAt(0, 4).toString() == "true") {
                System.out.println("if renouvelable = true");
                renouvelableCheckBox.setSelected(true);
                trueRadioButton.setSelected(true);
            }
            System.out.println("domaine to string: " + resultsTable.getValueAt(0, 6).toString());
            domaineMaterielBox.setSelectedItem(resultsTable.getValueAt(0, 6).toString());   //colonne 6: domaine
        }

    }

    public String createTacheQuery() {
        String fullSelect;
        System.out.println("debut creation tache");
        fullSelect = "SELECT id_tache, nom_tache " +
                "FROM tache " +
                "WHERE id_tache = %d " +
                "%s LOCATE('%s', nom_tache) != 0 " +
                "%s LOCATE('%s', description_tache) !=0 " +
                "%s priorite_tache = '%s' " +
                "%s nom_domaine = '%s'; ";

        String whereId = idTacheField.getText();
        int id = 0;
        try {
            id = Integer.parseInt(whereId);
        } catch (NumberFormatException err) {
            id = -1;
        }

        String whereNom = nomTacheField.getText();
        if (whereNom == "" || whereNom.isEmpty()) {
            whereNom = "///";
        }
        String opNom = "OR";

        String description = descriptionTacheField.getText();
        System.out.println("description" + description + "suite");
        if (description.isEmpty() || description == "") {
            System.out.println("descript est vide");
            description = "///";
        }
        String opDescription = "OR";

        String priorite = prioriteTacheBox.getSelectedItem().toString();
        String opPriorite = "OR";

        String whereDomaine = domaineTacheBox.getSelectedItem().toString();
        if (whereDomaine.isEmpty()) System.out.println("wheredomaine est vide");
        String opDomaine = "OR";


        if (andNomTache.isSelected()) {
            opNom = "AND";
        }
        if (andDescriptionTache.isSelected()) {
            opDescription = "AND";
        }
        if (andPrioriteTache.isSelected()) {
            opPriorite = "AND";
        }
        if (andDomaineTache.isSelected()) {
            opDomaine = "AND";
        }

        return String.format(fullSelect, id, opNom, whereNom, opDescription, description, opPriorite, priorite, opDomaine, whereDomaine);
    }


    public String createMaterielQuery() {
        System.out.println("debut creation materiel");
        String fullSelect = "SELECT id_materiel,nom_materiel " +
                "FROM materiel " +
                "WHERE id_materiel = %d " +
                "%s LOCATE('%s', nom_materiel) != 0 " +
                "%s LOCATE('%s', taille_materiel) != 0 " +
                "%s LOCATE('%s', description_materiel) !=0 " +
                "%s nom_domaine = '%s' ";

        String whereId = idMaterielField.getText();
        int id;
        try {
            id = Integer.parseInt(whereId);
        } catch (NumberFormatException err) {
            id = -1;
        }

        String opNom = "OR";
        String whereNom = nomMaterielField.getText();
        if (whereNom == "" || whereNom.isEmpty()) {
            whereNom = "///";
        }

        String opTaille = "OR";
        String whereTaille = tailleMaterielField.getText();
        if (whereTaille == "" || whereTaille.isEmpty()) {
            whereTaille = "///";
        }

        String opDescription = "OR";
        String description = descriptionMaterielField.getText();
        System.out.println("description" + description + "suite");
        if (description.isEmpty() || description == "") {
            System.out.println("descript est vide");
            description = "///";
        }

        String opDomaine = "OR";
        String whereDomaine = domaineMaterielBox.getSelectedItem().toString();
        if (whereDomaine.isEmpty()) System.out.println("wheredomaine est vide");

        String opRenouvelable = "OR";
        String renouvelable;

        if (andNomMateriel.isSelected()) {
            opNom = "AND";
        }
        if (andTailleMateriel.isSelected()) {
            opTaille = "AND";
        }
        if (andDescriptionMateriel.isSelected()) {
            opDescription = "AND";
        }
        if (andDomaineMateriel.isSelected()) {
            opDomaine = "AND";
        }
        if (andRenouvelable.isSelected()) {
            opRenouvelable = "AND";
        }

        if (renouvelableCheckBox.isSelected()) {
            if (trueRadioButton.isSelected()) {
                renouvelable = "true";
            } else {
                renouvelable = "false";
            }
            fullSelect += "%s renouvelable = %s ; ";
            return String.format(fullSelect, id, opNom, whereNom, opTaille, whereTaille, opDescription, description, opDomaine, whereDomaine, opRenouvelable, renouvelable);
        } else {
            fullSelect += ";";
            return String.format(fullSelect, id, opNom, whereNom, opTaille, whereTaille, opDescription, description, opDomaine, whereDomaine);
        }


    }


    public int sendUpdate(String query) throws SQLException {

        String fullSelect;
        int result;
        try (Statement statement = connection.createStatement()) {
            fullSelect = query;
            System.out.println(fullSelect);
            result = statement.executeUpdate(fullSelect);
            return result;
        }
    }

    public boolean sendQuery(String query) throws SQLException {
        String fullSelect;
        try (Statement statement = connection.createStatement()) {
            fullSelect = query;
            System.out.println("valeur de query dans sendQuery: " + fullSelect);
            ResultSet resultTache = statement.executeQuery(fullSelect);

            System.out.println("results.next");
            ResultsTableModel resultsTableModel = new ResultsTableModel(resultTache);

            resultsTable.setModel(resultsTableModel);
            System.out.println("rowcount: " + resultsTable.getRowCount());
            if (resultsTable.getRowCount() > 0) {
                resultsTable.setVisible(true);
                modifierMainPane.updateUI();
                return true;

            } else {
                JOptionPane.showMessageDialog(null, "aucun rÃ©sultat");
                return false;
            }

        }
    }


    public JPanel getModifierMainPane() {
        return modifierMainPane;
    }

   /* public static void main(String[] args) {
        JFrame frame = new JFrame("MenuModifier");
        frame.setContentPane(new MenuModifier().modifierMainPane);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    String query ="UPDATE " + choiceBox.getSelectedItem().toString() +
                "\nSET "+ resultsTable.getColumnName(0) + " = %s, \n" + //id
                resultsTable.getColumnName(1) + " = '%s', \n" +         //nom
                resultsTable.getColumnName(2) + " = '%s', \n" +;

    */

}
