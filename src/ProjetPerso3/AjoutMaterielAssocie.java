package ProjetPerso3;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Locale;

public class AjoutMaterielAssocie {
    private JPanel materielAssocPane;
    private JPanel tacheSearchPanel;
    private JTextField nomTacheField;
    private JTextField descriptionTacheField;
    private JTextField idTacheField;
    private JComboBox prioriteTacheBox;
    private JComboBox domaineTacheBox;
    private JCheckBox andNomTache;
    private JCheckBox andDescriptionTache;
    private JCheckBox andPrioriteTache;
    private JCheckBox andDomaineTache;
    private JPanel materielSearchPanel;
    private JTextField nomMaterielField;
    private JTextField idMaterielField;
    private JComboBox domaineMaterielBox;
    private JCheckBox andNomMateriel;
    private JCheckBox andDomaineMateriel;
    private JTextField descriptionMaterielField;
    private JTextField tailleMaterielField;
    private JCheckBox andDescriptionMateriel;
    private JCheckBox andTailleMateriel;
    private JCheckBox andRenouvelable;
    private JCheckBox renouvelableCheckBox;
    private JRadioButton trueRadioButton;
    private JRadioButton falseRadioButton;
    private JTable resultsTable;
    private JButton validerButton;
    private JTextField chosenTacheField;
    private JTextField chosenMaterielField;
    private JButton retourButton;
    private JTextField quantiteField;
    private JLabel quantiteLabel;
    private JTextField stepField;
    private JButton autreMaterielButton;
    private JTextField affichageField;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        materielAssocPane = new JPanel();
        materielAssocPane.setLayout(new GridLayoutManager(9, 5, new Insets(0, 0, 0, 0), -1, -1));
        materielAssocPane.setMinimumSize(new Dimension(600, 600));
        materielAssocPane.setPreferredSize(new Dimension(600, 600));
        final Spacer spacer1 = new Spacer();
        materielAssocPane.add(spacer1, new GridConstraints(8, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        materielAssocPane.add(scrollPane1, new GridConstraints(8, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        resultsTable = new JTable();
        scrollPane1.setViewportView(resultsTable);
        chosenTacheField = new JTextField();
        chosenTacheField.setEditable(false);
        chosenTacheField.setText("");
        materielAssocPane.add(chosenTacheField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("materiel nécéssaire");
        materielAssocPane.add(label1, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chosenMaterielField = new JTextField();
        chosenMaterielField.setEditable(false);
        materielAssocPane.add(chosenMaterielField, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 32), null, 0, false));
        tacheSearchPanel = new JPanel();
        tacheSearchPanel.setLayout(new GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        tacheSearchPanel.setVisible(true);
        materielAssocPane.add(tacheSearchPanel, new GridConstraints(1, 3, 7, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(619, 174), null, 0, false));
        nomTacheField = new JTextField();
        tacheSearchPanel.add(nomTacheField, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("nom tache");
        tacheSearchPanel.add(label2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        descriptionTacheField = new JTextField();
        tacheSearchPanel.add(descriptionTacheField, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("description");
        tacheSearchPanel.add(label3, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        idTacheField = new JTextField();
        idTacheField.setText("");
        tacheSearchPanel.add(idTacheField, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("id tache");
        tacheSearchPanel.add(label4, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        prioriteTacheBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("");
        defaultComboBoxModel1.addElement("urgent");
        defaultComboBoxModel1.addElement("important");
        defaultComboBoxModel1.addElement("utile");
        defaultComboBoxModel1.addElement("secondaire");
        defaultComboBoxModel1.addElement("inutile");
        prioriteTacheBox.setModel(defaultComboBoxModel1);
        tacheSearchPanel.add(prioriteTacheBox, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("priorité");
        tacheSearchPanel.add(label5, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        domaineTacheBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("");
        defaultComboBoxModel2.addElement("plomberie");
        defaultComboBoxModel2.addElement("electricite");
        defaultComboBoxModel2.addElement("mecanique");
        defaultComboBoxModel2.addElement("menuiserie");
        defaultComboBoxModel2.addElement("nettoyage");
        defaultComboBoxModel2.addElement("peinture");
        defaultComboBoxModel2.addElement("autre");
        domaineTacheBox.setModel(defaultComboBoxModel2);
        tacheSearchPanel.add(domaineTacheBox, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("nom domaine");
        tacheSearchPanel.add(label6, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andNomTache = new JCheckBox();
        andNomTache.setText("AND");
        tacheSearchPanel.add(andNomTache, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andDescriptionTache = new JCheckBox();
        andDescriptionTache.setText("AND");
        tacheSearchPanel.add(andDescriptionTache, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andPrioriteTache = new JCheckBox();
        andPrioriteTache.setText("AND");
        tacheSearchPanel.add(andPrioriteTache, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andDomaineTache = new JCheckBox();
        andDomaineTache.setText("AND");
        tacheSearchPanel.add(andDomaineTache, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        materielSearchPanel = new JPanel();
        materielSearchPanel.setLayout(new GridLayoutManager(6, 4, new Insets(0, 0, 0, 0), -1, -1));
        materielSearchPanel.setVisible(false);
        materielAssocPane.add(materielSearchPanel, new GridConstraints(8, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(242, 174), null, 0, false));
        nomMaterielField = new JTextField();
        materielSearchPanel.add(nomMaterielField, new GridConstraints(1, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("nom materiel");
        materielSearchPanel.add(label7, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        idMaterielField = new JTextField();
        idMaterielField.setText("");
        materielSearchPanel.add(idMaterielField, new GridConstraints(0, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("id materiel");
        materielSearchPanel.add(label8, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        domaineMaterielBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
        defaultComboBoxModel3.addElement("");
        defaultComboBoxModel3.addElement("plomberie");
        defaultComboBoxModel3.addElement("electricite");
        defaultComboBoxModel3.addElement("mecanique");
        defaultComboBoxModel3.addElement("menuiserie");
        defaultComboBoxModel3.addElement("nettoyage");
        defaultComboBoxModel3.addElement("peinture");
        defaultComboBoxModel3.addElement("autre");
        domaineMaterielBox.setModel(defaultComboBoxModel3);
        materielSearchPanel.add(domaineMaterielBox, new GridConstraints(4, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label9 = new JLabel();
        label9.setText("nom domaine");
        materielSearchPanel.add(label9, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andNomMateriel = new JCheckBox();
        andNomMateriel.setText("AND");
        materielSearchPanel.add(andNomMateriel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andDomaineMateriel = new JCheckBox();
        andDomaineMateriel.setText("AND");
        materielSearchPanel.add(andDomaineMateriel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label10 = new JLabel();
        label10.setText("description");
        materielSearchPanel.add(label10, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        descriptionMaterielField = new JTextField();
        materielSearchPanel.add(descriptionMaterielField, new GridConstraints(3, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        tailleMaterielField = new JTextField();
        materielSearchPanel.add(tailleMaterielField, new GridConstraints(2, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        andDescriptionMateriel = new JCheckBox();
        andDescriptionMateriel.setText("AND");
        materielSearchPanel.add(andDescriptionMateriel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label11 = new JLabel();
        label11.setText("taille");
        materielSearchPanel.add(label11, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andTailleMateriel = new JCheckBox();
        andTailleMateriel.setText("AND");
        materielSearchPanel.add(andTailleMateriel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        andRenouvelable = new JCheckBox();
        andRenouvelable.setText("AND");
        materielSearchPanel.add(andRenouvelable, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        renouvelableCheckBox = new JCheckBox();
        renouvelableCheckBox.setText("renouvelable");
        materielSearchPanel.add(renouvelableCheckBox, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        trueRadioButton = new JRadioButton();
        trueRadioButton.setText("true");
        materielSearchPanel.add(trueRadioButton, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        falseRadioButton = new JRadioButton();
        falseRadioButton.setText("false");
        materielSearchPanel.add(falseRadioButton, new GridConstraints(5, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        quantiteField = new JTextField();
        quantiteField.setEnabled(false);
        quantiteField.setVisible(true);
        materielAssocPane.add(quantiteField, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        quantiteLabel = new JLabel();
        quantiteLabel.setText("Quantité nécéssaire");
        quantiteLabel.setVisible(true);
        materielAssocPane.add(quantiteLabel, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stepField = new JTextField();
        stepField.setEditable(false);
        materielAssocPane.add(stepField, new GridConstraints(0, 2, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(300, -1), new Dimension(150, -1), null, 0, false));
        retourButton = new JButton();
        retourButton.setEnabled(false);
        retourButton.setText("Retour ");
        retourButton.setVisible(true);
        materielAssocPane.add(retourButton, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        validerButton = new JButton();
        validerButton.setText("Valider");
        materielAssocPane.add(validerButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        affichageField = new JTextField();
        Font affichageFieldFont = this.$$$getFont$$$(null, -1, 14, affichageField.getFont());
        if (affichageFieldFont != null) affichageField.setFont(affichageFieldFont);
        affichageField.setText("résultats de la recherche");
        affichageField.setVisible(false);
        materielAssocPane.add(affichageField, new GridConstraints(7, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer2 = new Spacer();
        materielAssocPane.add(spacer2, new GridConstraints(7, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        autreMaterielButton = new JButton();
        autreMaterielButton.setText("autre materiel");
        autreMaterielButton.setVisible(false);
        materielAssocPane.add(autreMaterielButton, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        materielAssocPane.add(spacer3, new GridConstraints(1, 2, 6, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label12 = new JLabel();
        label12.setText("tache selectionnée");
        materielAssocPane.add(label12, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return materielAssocPane;
    }


    private enum Step {tacheSearch, tacheSelect, materielSearch, materielSelect, associer}


    private Step step;
    private Connection connection;
    private int idTache;
    private int idMateriel;
    private String nomTache;
    private int quantite;
    private int tacheRow;
    private int tacheCol;
    private int materielRow;
    private int materielCol;


    public AjoutMaterielAssocie(Connection connect) {
        connection = connect;
        resultsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        stepField.setText("remplir le formulaire de recherche de tache et valider.");
        step = Step.tacheSearch;

        validerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                try {
                    System.out.println("bouton valider activé");

                    if (step == Step.tacheSearch) {
                        removeButtonListeners(retourButton);
                        searchTache();
                    } else if (step == Step.tacheSelect) {
                        removeButtonListeners(retourButton);
                        selectTache();
                    } else if (step == Step.materielSearch) {
                        removeButtonListeners(retourButton);
                        if (resultsTable.getSelectedRow() != -1) {
                            selectMateriel();

                        } else {

                            searchMateriel();
                        }
                    } else if (step == Step.materielSelect) {
                        removeButtonListeners(retourButton);
                        selectMateriel();
                    } else if (step == Step.associer) {
                        removeButtonListeners(retourButton);
                        associer();

                    }
                } catch (SQLException err) {
                    JOptionPane.showMessageDialog(null, err.toString());
                }
            }
        });
    }

    public AjoutMaterielAssocie(Connection connect, int _idTache, String _nomTache) {
        connection = connect;
        idTache = _idTache;
        nomTache = _nomTache;
        chosenTacheField.setText(nomTache);
        stepField.setText("remplir le formulaire de recherche de materiel et valider.");
        resultsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ListSelectionModel selectionModel = resultsTable.getSelectionModel();
        step = Step.materielSearch;
        tacheSearchPanel.setVisible(false);
        materielSearchPanel.setVisible(true);
        retourButton.setEnabled(true);

        validerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                try {
//                    System.out.println("bouton valider activé");
                    if (step == Step.tacheSearch) {
                        removeButtonListeners(retourButton);
                        searchTache();
                    } else if (step == Step.tacheSelect) {
                        removeButtonListeners(retourButton);
                        selectTache();
                    } else if (step == Step.materielSearch) {
                        removeButtonListeners(retourButton);
                        if (resultsTable.getSelectedRow() != -1) {
                            selectMateriel();
                        } else {
                            searchMateriel();
                        }
                    } else if (step == Step.materielSelect) {
                        removeButtonListeners(retourButton);
                        selectMateriel();
                    } else if (step == Step.associer) {
                        removeButtonListeners(retourButton);
                        associer();
                    }
                } catch (SQLException err) {
                    JOptionPane.showMessageDialog(null, err.toString());
                }
            }
        });
    }


    public void searchTache() throws SQLException {
        System.out.println("bouton valider en mode tache");
        resultsTable.setVisible(true);
        affichageField.setVisible(true);
        sendQuery(createTacheQuery());
        stepField.setText("Selectionner une tache et valider");
        step = Step.tacheSelect;
        retourButton.setText("retour");
        retourButton.setEnabled(true);
        retourButton.addActionListener(new ActionListener() { // bouton recommencer depuis la recherche de tache
            @Override
            public void actionPerformed(ActionEvent e) {
                stepField.setText("remplir le formulaire de recherche de tache et valider.");
                System.out.println("remove all");
                resultsTable.setVisible(false);
                materielAssocPane.updateUI();
                step = Step.tacheSearch;
                retourButton.setEnabled(false);
            }
        });
    }

    public void selectTache() {

        tacheRow = resultsTable.getSelectedRow();
        tacheCol = resultsTable.getSelectedColumn();
        idTache = Integer.parseInt(resultsTable.getModel().getValueAt(tacheRow, 0).toString());
        chosenTacheField.setText(resultsTable.getModel().getValueAt(tacheRow, 1).toString());
        tacheSearchPanel.setVisible(false);
        materielSearchPanel.setVisible(true);
        affichageField.setText("materiel déja associé à la tache");
        createCheckQuery(); //afficher la materiel déja associé à cette tache

        stepField.setText("remplir le formulaire de recherche de materiel et valider.");
        step = Step.materielSearch;
        retourButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tacheSearchPanel.setVisible(true);
                materielSearchPanel.setVisible(false);
                retourButton.setEnabled(false);
                resultsTable.setVisible(false);
                stepField.setText("remplir le formulaire de recherche de tache et valider.");
                step = Step.tacheSearch;
            }
        });
    }

    public void searchMateriel() throws SQLException {
//        System.out.println("bouton valider en mode materiel");

        sendQuery(createMaterielQuery());
        stepField.setText("Selectionner un materiel et valider");
        affichageField.setText("résultats de la recherche");
        step = Step.materielSelect;
        retourButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tacheSearchPanel.setVisible(true);
                materielSearchPanel.setVisible(false);
                stepField.setText("remplir le formulaire de recherche de tache et valider.");
                step = Step.tacheSearch;


            }
        });
    }

    public void selectMateriel() {

        quantiteField.setEnabled(true);
        stepField.setText("valider pour confirmer l'ajout");
        affichageField.setText("materiel déja associé à la tache");
        materielRow = resultsTable.getSelectedRow();
        materielCol = resultsTable.getSelectedColumn();
        idMateriel = Integer.parseInt(resultsTable.getModel().getValueAt(materielRow, 0).toString());
        chosenMaterielField.setText(resultsTable.getModel().getValueAt(materielRow, 1).toString());
//                        System.out.println("string id materiel: "+ resultsTable.getModel().getValueAt(materielRow,0).toString());
        quantiteField.setVisible(true);
        quantiteLabel.setVisible(true);
        materielSearchPanel.setVisible(false);
        tacheSearchPanel.setVisible(false);
        validerButton.setText("associer");
        createCheckQuery(); //afficher la materiel déja associé à cette tache
        step = Step.associer;

        retourButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                quantiteField.setEnabled(false);
                tacheSearchPanel.setVisible(true);
                materielSearchPanel.setVisible(false);
                stepField.setText("remplir le formulaire de recherche de materiel et valider.");
                step = Step.materielSearch;
                validerButton.setText("chercher");
            }
        });
    }

    public void associer() throws SQLException {
        retourButton.setText("recommencer");
        autreMaterielButton.setVisible(true);
        validerButton.setEnabled(false);
        createCheckQuery();

        try {
            quantite = Integer.parseInt(quantiteField.getText());
            String quantiteQuery;
            if (checkPresent()) {
                quantiteQuery = "UPDATE necessite \nSET quantite_necessite = quantite_necessite + %d \n" +
                        "WHERE id_tache = %d AND id_materiel = %d;";
                quantiteQuery = String.format(quantiteQuery, quantite, idTache, idMateriel);
            } else {
                quantiteQuery = "INSERT INTO necessite \nVALUES (%d, %d, %d)";
                quantiteQuery = String.format(quantiteQuery, idTache, idMateriel, quantite);
            }
            int updateResult = sendUpdate(quantiteQuery);
            JOptionPane.showMessageDialog(null, String.format("%d colonne(s) materiel affectée(s).", updateResult));

            retourButton.addActionListener(new ActionListener() { // bouton recommencer depuis la recherche de tache
                @Override
                public void actionPerformed(ActionEvent e) {
                    stepField.setText("remplir le formulaire de recherche de tache et valider.");
                    step = Step.tacheSearch;
                    tacheSearchPanel.setVisible(true);
                    materielSearchPanel.setVisible(false);
                    validerButton.setText("valider");
                    validerButton.setEnabled(true);
                    retourButton.setText("retour");
                    retourButton.setEnabled(false);
                }
            });
            autreMaterielButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    stepField.setText("remplir le formulaire de recherche de materiel et valider.");
                    materielSearchPanel.setVisible(true);
                    validerButton.setText("valider");
                    retourButton.setText("retour");
                    autreMaterielButton.setVisible(false);
                    step = Step.materielSearch;
                }
            });
        } catch (NumberFormatException err) {
            JOptionPane.showMessageDialog(null, "Veuillez saisir un nombre");
        }
    }


    public boolean checkPresent() {
        System.out.println("check present activé");
        boolean present = false;
        for (int i = 0; i < resultsTable.getRowCount(); i++) {
            String analysedValue = resultsTable.getModel().getValueAt(i, 0).toString();
            System.out.println("id materiel vaut :" + idMateriel);
            System.out.println("valeur analysée :" + analysedValue);
            if (Integer.parseInt(analysedValue) == idMateriel) {
                present = true;
                break;
            } else {
                continue;
            }
        }
        System.out.println("checkpresent renvoie :" + present);
        return present;
    }

    /*public boolean isPresent() throws SQLException{
        // faire un select pour vérifier si le materiel est déja associé

        String checkQuery = "SELECT id_materiel FROM necessite \nWHERE id_tache = "+ idTache+ ";";
        System.out.println(checkQuery);
        ResultSet resultSet;
        boolean present = false;
        try (Statement statement = connection.createStatement()) {
            resultSet = statement.executeQuery(checkQuery);
            ResultsTableModel resultsTableModel = new ResultsTableModel(resultSet);
//            resultsTable.setModel(resultsTableModel);
//            resultsTable.setVisible(true);
//            materielAssocPane.updateUI();

            if(resultSet.next()){
                System.out.println("valeur colonne" + resultsTableModel.getValueAt());
                if(resultSet.getInt(0)==idMateriel){
                    System.out.println("ispresent true");
                    present = true;
                }
                else { present = false;}
            }
        }
        return present;
    }*/


    public void removeButtonListeners(JButton button) {
        for (ActionListener al : button.getActionListeners()) {
            button.removeActionListener(al);
        }
    }
   /* public void clearTable(){
        for (int i =0; i< resultsTable.getRowCount();i++){
            resultsTable.remove(i);
        }
    }*/


    public void createCheckQuery() {
        String checkQuery = "SELECT materiel.id_materiel, nom_materiel, quantite_necessite FROM materiel, necessite\n" +
                "WHERE necessite.id_materiel = materiel.id_materiel AND necessite.id_tache = " + idTache + ";";

        try {
            sendQuery(checkQuery);
        } catch (SQLException err) {
            JOptionPane.showMessageDialog(null, err.toString());
        }
    }


    public String createTacheQuery() {
        String fullSelect;
        System.out.println("debut creation tache");
        fullSelect = "SELECT id_tache, nom_tache " +
                "FROM tache " +
                "WHERE id_tache = %d " +
                "%s LOCATE('%s', nom_tache) != 0 " +
                "%s LOCATE('%s', description_tache) !=0 " +
                "%s priorite_tache = '%s' " +
                "%s nom_domaine = '%s'; ";

        String whereId = idTacheField.getText();
        int id = 0;
        try {
            id = Integer.parseInt(whereId);
        } catch (NumberFormatException err) {
            id = -1;
        }

        String whereNom = nomTacheField.getText();
        if (whereNom == "" || whereNom.isEmpty()) {
            whereNom = "///";
        }
        String opNom = "OR";

        String description = descriptionTacheField.getText();
        System.out.println("description" + description + "suite");
        if (description.isEmpty() || description == "") {
            System.out.println("descript est vide");
            description = "///";
        }
        String opDescription = "OR";

        String priorite = prioriteTacheBox.getSelectedItem().toString();
        String opPriorite = "OR";

        String whereDomaine = domaineTacheBox.getSelectedItem().toString();
        if (whereDomaine.isEmpty()) System.out.println("wheredomaine est vide");
        String opDomaine = "OR";


        if (andNomTache.isSelected()) {
            opNom = "AND";
        }
        if (andDescriptionTache.isSelected()) {
            opDescription = "AND";
        }
        if (andPrioriteTache.isSelected()) {
            opPriorite = "AND";
        }
        if (andDomaineTache.isSelected()) {
            opDomaine = "AND";
        }

        return String.format(fullSelect, id, opNom, whereNom, opDescription, description, opPriorite, priorite, opDomaine, whereDomaine);
    }


    public String createMaterielQuery() {
        System.out.println("debut creation materiel");
        String fullSelect = "SELECT id_materiel,nom_materiel " +
                "FROM materiel " +
                "WHERE id_materiel = %d " +
                "%s LOCATE('%s', nom_materiel) != 0 " +
                "%s LOCATE('%s', taille_materiel) != 0 " +
                "%s LOCATE('%s', description_materiel) !=0 " +
                "%s nom_domaine = '%s' ";

        String whereId = idMaterielField.getText();
        int id;
        try {
            id = Integer.parseInt(whereId);
        } catch (NumberFormatException err) {
            id = -1;
        }

        String opNom = "OR";
        String whereNom = nomMaterielField.getText();
        if (whereNom == "" || whereNom.isEmpty()) {
            whereNom = "///";
        }

        String opTaille = "OR";
        String whereTaille = tailleMaterielField.getText();
        if (whereTaille == "" || whereTaille.isEmpty()) {
            whereTaille = "///";
        }

        String opDescription = "OR";
        String description = descriptionMaterielField.getText();
        System.out.println("description" + description + "suite");
        if (description.isEmpty() || description == "") {
            System.out.println("descript est vide");
            description = "///";
        }

        String opDomaine = "OR";
        String whereDomaine = domaineMaterielBox.getSelectedItem().toString();
        if (whereDomaine.isEmpty()) System.out.println("wheredomaine est vide");

        String opRenouvelable = "OR";
        String renouvelable;

        if (andNomMateriel.isSelected()) {
            opNom = "AND";
        }
        if (andTailleMateriel.isSelected()) {
            opTaille = "AND";
        }
        if (andDescriptionMateriel.isSelected()) {
            opDescription = "AND";
        }
        if (andDomaineMateriel.isSelected()) {
            opDomaine = "AND";
        }
        if (andRenouvelable.isSelected()) {
            opRenouvelable = "AND";
        }

        if (renouvelableCheckBox.isSelected()) {
            if (trueRadioButton.isSelected()) {
                renouvelable = "true";
            } else {
                renouvelable = "false";
            }
            fullSelect += "%s renouvelable = %s ; ";
            return String.format(fullSelect, id, opNom, whereNom, opTaille, whereTaille, opDescription, description, opDomaine, whereDomaine, opRenouvelable, renouvelable);
        } else {
            fullSelect += ";";
            return String.format(fullSelect, id, opNom, whereNom, opTaille, whereTaille, opDescription, description, opDomaine, whereDomaine);
        }


    }

    public int sendUpdate(String query) throws SQLException {

        String fullSelect;
        int result;
        try (Statement statement = connection.createStatement()) {
            fullSelect = query;
            System.out.println(fullSelect);
            result = statement.executeUpdate(fullSelect);
            return result;
        }
    }

    public void sendQuery(String query) throws SQLException {
        String fullSelect;
        try (Statement statement = connection.createStatement()) {
            fullSelect = query;
            System.out.println(fullSelect);
            ResultSet resultTache = statement.executeQuery(fullSelect);
            ResultsTableModel resultsTableModel = new ResultsTableModel(resultTache);
            resultsTable.setModel(resultsTableModel);
            resultsTable.setVisible(true);
            materielAssocPane.updateUI();
        }
    }

    public JPanel getMaterielAssocPane() {
        return materielAssocPane;
    }
}
